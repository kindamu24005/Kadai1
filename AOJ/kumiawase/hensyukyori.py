"""
編集距離

問題
２つの文字列 s1、s2 の編集距離（レーベンシュタイン距離）を求めて下さい。

編集距離とは、以下３種類の操作によって、１つの文字列を別の文字列に変形するのに必要な手順の最小回数です：

挿入: 文字列に１つの文字を挿入する。
削除: 文字列から１つの文字を削除する。
置換: 文字列の中の１文字を別な文字に置き換える

入力
s1
s2

出力
編集距離を１行に出力する。
"""

#入力
s1=input()
s2=input()

#二つ文字の長さをとる
S1=len(s1)
S2=len(s2)

#dp表の行と列は各文字の長さ+1
dp=[[0]*(S2+1) for b in range(S1+1)]

#初期値を入力
for i in range(S1+1):
  dp[i][0] = i
for j in range(S2+1):
  dp[0][j] = j

#s1のi番目からs2のj番目に変更するときの編集距離を要素として表を埋めていく。
#初期値を入れてあるので、1から回す
for i in range(1,S1+1):
  for j in range(1,S2+1):
    #要素の値を決定するのは3つのパターンの中から最小のものを選ぶ
    dp[i][j]=min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+(s1[i-1]!=s2[j-1]))
print(dp[S1][S2])