"""
個数制限付きナップサック問題

価値が vi 重さが wi であるような N 種類の品物と、容量が W のナップザックがあります。
次の条件を満たすように、品物を選んでナップザックに入れます。
・選んだ品物の価値の合計をできるだけ高くする。
・選んだ品物の重さの総和は W を超えない。
・i 番目の品物は mi 個まで選ぶことができる。
価値の合計の最大値を求めてください。

入力
N W
v1 w1 m1 
v2 w2 m2 
:
vN wN mN 
１行目に２つの整数　N、W が空白区切りで1行に与えられる。
続く N 行に i 番目の品物の価値、重さ、個数の制限が空白区切りで与えられる。

出力
価値の合計の最大値を１行に出力する。

制約
1 ≤ N ≤ 100
1 ≤ vi ≤ 1,000
1 ≤ wi ≤ 1,000
1 ≤ mi ≤ 10,000
1 ≤ W ≤ 10,000
"""




# pythonの組み込み関数は遅いため、max関数を自作
def max2(x, y):
    if x > y:
        return x
    else:
        return y
        
def main():
    N,We=map(int,input().split())
    
    # 各v,w,mを入れるリスト
    L=[]

    # 「繰り返し二乗法」を使って各品物の個数を分解する(品物の個数を全て1個に分解していては計算が間に合わないため)
    # なぜ「繰り返し二乗和」なのか → 分解した品物の個数の組み合わせにより品物を1個使う場合、2個使う場合、・・・を全部表現できるため
    for _ in range(N):
      v,w,m=map(int,input().split())
      # kは分解された各品物の個数
      k=1
      while m>0:
        # 品物の価値と容量にkをかけてリストに入れる
        L.append([v*k,w*k])
        m-=k
        k=min(2*k,m)
    
    #あとは0-1ナップサック問題と同じ容量で求める
    dp=[0]*(We+1)
    for v,w in L:
      for j in range(We,w-1,-1):
        dp[j]=max2(dp[j],dp[j-w]+v)
    print(dp[We])
main()